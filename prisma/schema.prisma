// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// update /src/app.d.ts lucia interfaces after adding properties to User
model User {
  id       String  @id @unique
  username String
  email    String?
  avatar   String?

  auth_session    Session[]
  key             Key[]
  messages        Message[]
  UsersInProjects UsersInProjects[]
  UsersInTopics   UsersInTopics[]
}

// update /src/app.d.ts lucia interfaces after adding properties to Session
model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

// data architecture for wept;
// projects -> topics -> messages
// projects have users (members)
// topics have users (subset of project users, a user may only be in some topics of a project)
// projects have one or more admins, who can add/remove users
// topics have one or more admins, who can add/remove users
// messages have one author, who can edit/delete message

model Project {
  id          String            @id @unique @default(uuid())
  name        String
  // human description of project
  description String?
  // system prompt for project
  context     String?
  users       UsersInProjects[]
  topics      Topic[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model UsersInProjects {
  id         String   @id @unique @default(uuid())
  user       User     @relation(references: [id], fields: [user_id], onDelete: Cascade)
  user_id    String
  project    Project  @relation(references: [id], fields: [project_id], onDelete: Cascade)
  project_id String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  admin      Boolean  @default(false)
}

model Topic {
  id          String          @id @unique @default(uuid())
  name        String
  // human description of topic
  description String?
  // system prompt for topic
  context     String?
  users       UsersInTopics[]
  project     Project         @relation(references: [id], fields: [project_id], onDelete: Cascade)
  project_id  String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  messages    Message[]
}

model UsersInTopics {
  id        String   @id @unique @default(uuid())
  user      User     @relation(references: [id], fields: [user_id], onDelete: Cascade)
  user_id   String
  topic     Topic    @relation(references: [id], fields: [topic_id], onDelete: Cascade)
  topic_id  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admin     Boolean  @default(false)
}

model Message {
  id        String   @id @unique @default(uuid())
  content   String
  author    User     @relation(references: [id], fields: [author_id], onDelete: Cascade)
  author_id String
  topic     Topic    @relation(references: [id], fields: [topic_id], onDelete: Cascade)
  topic_id  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
